# dashboard_defense_brics_avance.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Configuration de la page
st.set_page_config(
    page_title="Analyse Strat√©gique Avanc√©e - BRICS",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© avanc√©
st.markdown("""
<style>
    .main-header {
        font-size: 2.8rem;
        background: linear-gradient(45deg, #FF9933, #0055A4, #008000, #DA0000, #FFB81C);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    .metric-card {
        background: linear-gradient(135deg, #FF9933, #FF671F);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 0.5rem 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
    .section-header {
        color: #0055A4;
        border-bottom: 3px solid #FF9933;
        padding-bottom: 0.8rem;
        margin-top: 2rem;
        font-size: 1.8rem;
        font-weight: bold;
    }
    .china-card {
        background: linear-gradient(135deg, #DE2910, #FFDE00);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.3);
    }
    .russia-card {
        background: linear-gradient(135deg, #0033A0, #D52B1E);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
    .india-card {
        background: linear-gradient(135deg, #FF9933, #138808);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
    .brazil-card {
        background: linear-gradient(135deg, #009C3B, #FFDF00);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
    .safrica-card {
        background: linear-gradient(135deg, #007A4D, #FFB81C);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
    .cooperation-card {
        background: linear-gradient(135deg, #4B0082, #8A2BE2);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

class DefenseBricsDashboardAvance:
    def __init__(self):
        self.branches_options = self.define_branches_options()
        self.programmes_options = self.define_programmes_options()
        self.member_capabilities = self.define_member_capabilities()
        self.cooperation_projects = self.define_cooperation_projects()
        
    def define_branches_options(self):
        return [
            "BRICS - Vue d'Ensemble", "Chine", "Russie", "Inde", 
            "Br√©sil", "Afrique du Sud", "Coop√©rations BRICS",
            "Nouveaux Membres (2024)"
        ]
    
    def define_programmes_options(self):
        return [
            "Coop√©ration Militaire BRICS", "Exercices Conjoints", 
            "Transferts de Technologie", "D√©fense Anti-Missile",
            "Marine BRICS", "Cybers√©curit√© Collective",
            "Industrie de D√©fense Int√©gr√©e"
        ]
    
    def define_member_capabilities(self):
        return {
            "Chine": {
                "budget": 230.0,
                "personnel": 2035,
                "nucleaire": "Oui",
                "porte_avions": 3,
                "icbm": "DF-41, DF-31AG",
                "technologies": "Hypersonique, IA, Cyber"
            },
            "Russie": {
                "budget": 65.0,
                "personnel": 1014,
                "nucleaire": "Oui", 
                "porte_avions": 1,
                "icbm": "RS-28 Sarmat, RS-24 Yars",
                "technologies": "Hypersonique, Guerre √©lectronique"
            },
            "Inde": {
                "budget": 73.0,
                "personnel": 1455,
                "nucleaire": "Oui",
                "porte_avions": 2,
                "icbm": "Agni-V, Agni-VI",
                "technologies": "Missiles, Spatial, Cyber"
            },
            "Br√©sil": {
                "budget": 22.0,
                "personnel": 334,
                "nucleaire": "Non",
                "porte_avions": 0,
                "forces": "Amazonie, Surveillance maritime",
                "technologies": "Sous-marins, Syst√®mes de surveillance"
            },
            "Afrique du Sud": {
                "budget": 3.0,
                "personnel": 72,
                "nucleaire": "Non",
                "forces": "Forces sp√©ciales, Paix ONU",
                "technologies": "Cybers√©curit√©, Renseignement"
            }
        }
    
    def define_cooperation_projects(self):
        return {
            "Exercice Naval BRICS": {"pays": "Tous", "type": "Exercice conjoint", "statut": "Actif", "frequence": "Annuel"},
            "Syst√®me de Communication S√©curis√©": {"pays": "Chine/Russie/Inde", "type": "Communication", "statut": "D√©veloppement", "objectif": "2026"},
            "Centre Cyber BRICS": {"pays": "Chine/Russie", "type": "Cybers√©curit√©", "statut": "Op√©rationnel", "localisation": "Moscou/P√©kin"},
            "D√©veloppement Missilistique": {"pays": "Chine/Russie/Inde", "type": "Technologie", "statut": "Coop√©ration", "domaines": "Hypersonique, Croisi√®re"},
            "Surveillance Spatiale": {"pays": "Chine/Russie", "type": "Espace", "statut": "Partage donn√©es", "satellites": "Reconnaissance"}
        }
    
    def generate_advanced_data(self, selection):
        """G√©n√®re des donn√©es avanc√©es et d√©taill√©es pour les BRICS"""
        annees = list(range(2000, 2028))
        
        config = self.get_advanced_config(selection)
        
        data = {
            'Annee': annees,
            'Budget_Defense_Mds': self.simulate_advanced_budget(annees, config),
            'Personnel_Milliers': self.simulate_advanced_personnel(annees, config),
            'PIB_Militaire_Pourcent': self.simulate_military_gdp_percentage(annees),
            'Exercices_Militaires': self.simulate_advanced_exercises(annees, config),
            'Readiness_Operative': self.simulate_advanced_readiness(annees),
            'Capacite_Dissuasion': self.simulate_advanced_deterrence(annees),
            'Temps_Mobilisation_Jours': self.simulate_advanced_mobilization(annees),
            'Exercices_Conjoints': self.simulate_joint_exercises(annees),
            'Developpement_Technologique': self.simulate_tech_development(annees),
            'Capacite_Navale': self.simulate_naval_capacity(annees),
            'Couverture_AD': self.simulate_air_defense_coverage(annees),
            'Cooperation_Structured': self.simulate_structured_cooperation(annees),
            'Cyber_Capabilities': self.simulate_cyber_capabilities(annees),
            'Production_Armements': self.simulate_weapon_production(annees)
        }
        
        # Donn√©es sp√©cifiques aux programmes
        if 'cooperation' in config.get('priorites', []):
            data.update({
                'Projets_Cooperation': self.simulate_cooperation_projects(annees),
                'Echanges_Technologiques': self.simulate_tech_exchanges(annees),
                'Exercices_BRICS': self.simulate_brics_exercises(annees)
            })
        
        if 'nucleaire' in config.get('priorites', []):
            data.update({
                'Stock_Ogives_Nucleaires': self.simulate_nuclear_arsenal(annees),
                'Portee_Missiles_Km': self.simulate_missile_range(annees),
                'Triade_Nucleaire': self.simulate_nuclear_triad(annees)
            })
        
        if 'marine' in config.get('priorites', []):
            data.update({
                'Porte_Avions': self.simulate_aircraft_carriers(annees),
                'Sous_Marins': self.simulate_submarines(annees),
                'Projection_Maritime': self.simulate_maritime_projection(annees)
            })
        
        if 'innovation' in config.get('priorites', []):
            data.update({
                'Recherche_Defense': self.simulate_defense_research(annees),
                'Technologies_Emergentes': self.simulate_emerging_tech(annees),
                'Exportations_Armes': self.simulate_weapon_exports(annees)
            })
        
        return pd.DataFrame(data), config
    
    def get_advanced_config(self, selection):
        """Configuration avanc√©e avec plus de d√©tails pour les BRICS"""
        configs = {
            "BRICS - Vue d'Ensemble": {
                "type": "alliance_multipolaire",
                "budget_base": 400.0,
                "personnel_base": 4900,
                "exercices_base": 180,
                "priorites": ["cooperation", "nucleaire", "marine", "innovation", "cyber"],
                "doctrines": ["Multipolarit√©", "Souverainet√© strat√©gique", "D√©fense collective"],
                "objectifs": "Contrepoids √† l'h√©g√©monie occidentale"
            },
            "Chine": {
                "type": "puissance_mondiale",
                "budget_base": 230.0,
                "personnel_base": 2035,
                "priorites": ["marine", "missiles", "cyber", "espace"],
                "capacites": ["Force de frappe nucl√©aire", "Marine bleue", "Guerre √©lectronique"],
                "doctrine": "D√©fense active p√©riph√©rique"
            },
            "Russie": {
                "type": "puissance_nucleaire",
                "budget_base": 65.0,
                "personnel_base": 1014,
                "priorites": ["nucleaire", "missiles", "cyber", "asymetrique"],
                "capacites": ["Triade nucl√©aire", "Syst√®mes hypersoniques", "Guerre hybride"],
                "doctrine": "Dissuasion strat√©gique √©largie"
            },
            "Coop√©rations BRICS": {
                "type": "cooperation_strategique",
                "budget_base": 15.0,
                "priorites": ["exercices_conjoints", "transfert_technologie", "intelligence_collective"],
                "projets": ["Exercices navals", "Centre cyber", "Syst√®mes C4ISR"],
                "objectifs": "Autonomie strat√©gique collective"
            }
        }
        
        return configs.get(selection, {
            "type": "membre_brics",
            "personnel_base": 300,
            "exercices_base": 25,
            "priorites": ["defense_generique"]
        })
    
    def simulate_advanced_budget(self, annees, config):
        """Simulation avanc√©e du budget avec variations g√©opolitiques"""
        budget_base = config.get('budget_base', 350.0)
        budgets = []
        for annee in annees:
            base = budget_base * (1 + 0.055 * (annee - 2000))
            # Variations selon √©v√©nements g√©opolitiques
            if 2008 <= annee <= 2010:  # Crise financi√®re
                base *= 1.08  # Les BRICS ont moins souffert
            elif annee >= 2014:  # Formation BRICS formelle
                base *= 1.1
            elif annee >= 2020:  # Pand√©mie et tensions
                base *= 1.12
            elif annee >= 2022:  # Expansion g√©opolitique
                base *= 1.15
            budgets.append(base)
        return budgets
    
    def simulate_advanced_personnel(self, annees, config):
        """Simulation avanc√©e des effectifs"""
        personnel_base = config.get('personnel_base', 4500)
        return [personnel_base * (1 + 0.008 * (annee - 2000)) for annee in annees]
    
    def simulate_military_gdp_percentage(self, annees):
        """Pourcentage du PIB consacr√© √† la d√©fense"""
        return [2.2 + 0.12 * (annee - 2000) for annee in annees]
    
    def simulate_advanced_exercises(self, annees, config):
        """Exercices militaires avec saisonnalit√©"""
        base = config.get('exercices_base', 120)
        return [base + 6 * (annee - 2000) + 8 * np.sin(2 * np.pi * (annee - 2000)/4) for annee in annees]
    
    def simulate_advanced_readiness(self, annees):
        """Pr√©paration op√©rationnelle avanc√©e"""
        readiness = []
        for annee in annees:
            base = 65 + 1.8 * (annee - 2000)
            if annee >= 2008:  # √âmergence BRICS
                base += 6
            if annee >= 2014:  # Coop√©ration renforc√©e
                base += 5
            if annee >= 2020:  # Modernisation acc√©l√©r√©e
                base += 4
            readiness.append(min(base, 90))
        return readiness
    
    def simulate_advanced_deterrence(self, annees):
        """Capacit√© de dissuasion avanc√©e"""
        deterrence = []
        for annee in annees:
            base = 60  # D√©but modeste
            if annee >= 2006:
                base += 3  # Mont√©e en puissance
            if annee >= 2014:
                base += 5  # Coordination BRICS
            if annee >= 2020:
                base += 7  # Capacit√©s avanc√©es
            deterrence.append(min(base, 88))
        return deterrence
    
    def simulate_advanced_mobilization(self, annees):
        """Temps de mobilisation avanc√©"""
        return [max(50 - 1.5 * (annee - 2000), 15) for annee in annees]
    
    def simulate_joint_exercises(self, annees):
        """Exercices conjoints BRICS"""
        exercises = []
        for annee in annees:
            if annee < 2010:
                exercises.append(2)
            elif annee < 2015:
                exercises.append(5 + (annee - 2010))
            else:
                exercises.append(10 + 2 * (annee - 2015))
        return exercises
    
    def simulate_tech_development(self, annees):
        """D√©veloppement technologique global"""
        return [min(55 + 2.8 * (annee - 2000), 88) for annee in annees]
    
    def simulate_naval_capacity(self, annees):
        """Capacit√© navale combin√©e"""
        return [min(45 + 3.2 * (annee - 2000), 85) for annee in annees]
    
    def simulate_air_defense_coverage(self, annees):
        """Couverture de d√©fense anti-a√©rienne"""
        return [min(50 + 2.5 * (annee - 2000), 86) for annee in annees]
    
    def simulate_structured_cooperation(self, annees):
        """Coop√©ration structur√©e BRICS"""
        return [min(20 + 4 * (annee - 2009), 75) for annee in annees if annee >= 2009] + [0] * (2009 - min(annees))
    
    def simulate_cyber_capabilities(self, annees):
        """Capacit√©s cybern√©tiques"""
        return [min(50 + 3.5 * (annee - 2000), 87) for annee in annees]
    
    def simulate_weapon_production(self, annees):
        """Production d'armements (indice)"""
        return [min(60 + 2.8 * (annee - 2000), 89) for annee in annees]
    
    def simulate_cooperation_projects(self, annees):
        """Projets de coop√©ration BRICS"""
        return [min(2 + 3 * (annee - 2009), 25) for annee in annees if annee >= 2009] + [0] * (2009 - min(annees))
    
    def simulate_tech_exchanges(self, annees):
        """√âchanges technologiques"""
        return [min(10 + 4 * (annee - 2009), 60) for annee in annees if annee >= 2009] + [0] * (2009 - min(annees))
    
    def simulate_brics_exercises(self, annees):
        """Exercices sp√©cifiques BRICS"""
        return [min(1 + 2 * (annee - 2014), 15) for annee in annees if annee >= 2014] + [0] * (2014 - min(annees))
    
    def simulate_nuclear_arsenal(self, annees):
        """Arsenal nucl√©aire combin√©"""
        return [min(3000 + 100 * (annee - 2000), 6000) for annee in annees]
    
    def simulate_missile_range(self, annees):
        """Port√©e moyenne des missiles (km)"""
        return [min(2000 + 150 * (annee - 2000), 8000) for annee in annees]
    
    def simulate_nuclear_triad(self, annees):
        """Capacit√© de triade nucl√©aire"""
        return [min(40 + 3 * (annee - 2000), 85) for annee in annees]
    
    def simulate_aircraft_carriers(self, annees):
        """Porte-avions op√©rationnels"""
        return [min(1 + 0.3 * (annee - 2000), 6) for annee in annees]
    
    def simulate_submarines(self, annees):
        """Sous-marins strat√©giques"""
        return [min(10 + 2 * (annee - 2000), 50) for annee in annees]
    
    def simulate_maritime_projection(self, annees):
        """Projection maritime"""
        return [min(30 + 3 * (annee - 2000), 80) for annee in annees]
    
    def simulate_defense_research(self, annees):
        """Recherche d√©fense"""
        return [min(40 + 3.2 * (annee - 2000), 84) for annee in annees]
    
    def simulate_emerging_tech(self, annees):
        """Technologies √©mergentes"""
        return [min(35 + 4 * (annee - 2000), 82) for annee in annees]
    
    def simulate_weapon_exports(self, annees):
        """Exportations d'armes (milliards USD)"""
        return [min(5 + 1.5 * (annee - 2000), 30) for annee in annees]
    
    def display_advanced_header(self):
        """En-t√™te avanc√© avec plus d'informations"""
        st.markdown('<h1 class="main-header">üåç ANALYSE STRAT√âGIQUE AVANC√âE - BRICS</h1>', 
                   unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown("""
            <div style='text-align: center; background: linear-gradient(135deg, #FF9933, #0055A4, #008000); 
            padding: 1rem; border-radius: 10px; color: white; margin: 1rem 0;'>
            <h3>üõ°Ô∏è COOP√âRATION STRAT√âGIQUE DES BRICS - BR√âSIL, RUSSIE, INDE, CHINE, AFRIQUE DU SUD</h3>
            <p><strong>Analyse multidimensionnelle des capacit√©s militaires et de la coop√©ration strat√©gique (2000-2027)</strong></p>
            </div>
            """, unsafe_allow_html=True)
    
    def create_advanced_sidebar(self):
        """Sidebar avanc√© avec plus d'options"""
        st.sidebar.markdown("## üéõÔ∏è PANEL DE CONTR√îLE AVANC√â")
        
        # S√©lection du type d'analyse
        type_analyse = st.sidebar.radio(
            "Mode d'analyse:",
            ["Vue d'Ensemble BRICS", "Analyse par Pays", "Coop√©rations Strat√©giques", "Sc√©narios G√©opolitiques"]
        )
        
        if type_analyse == "Vue d'Ensemble BRICS":
            selection = st.sidebar.selectbox("Niveau d'analyse:", self.branches_options)
        elif type_analyse == "Analyse par Pays":
            selection = st.sidebar.selectbox("Pays membre:", ["Chine", "Russie", "Inde", "Br√©sil", "Afrique du Sud"])
        elif type_analyse == "Coop√©rations Strat√©giques":
            selection = st.sidebar.selectbox("Programme de coop√©ration:", self.programmes_options)
        else:
            selection = "Sc√©narios G√©opolitiques"
        
        # Options avanc√©es
        st.sidebar.markdown("### üîß OPTIONS AVANC√âES")
        show_geopolitical = st.sidebar.checkbox("Contexte g√©opolitique", value=True)
        show_cooperation = st.sidebar.checkbox("Analyse des coop√©rations", value=True)
        show_technical = st.sidebar.checkbox("D√©tails techniques", value=True)
        threat_assessment = st.sidebar.checkbox("√âvaluation des menaces", value=True)
        
        # Param√®tres de simulation
        st.sidebar.markdown("### ‚öôÔ∏è PARAM√àTRES DE SIMULATION")
        scenario = st.sidebar.selectbox("Sc√©nario:", ["Coop√©ration Renforc√©e", "Expansion BRICS+", "Confrontation avec l'Occident", "Autonomie Strat√©gique"])
        
        return {
            'selection': selection,
            'type_analyse': type_analyse,
            'show_geopolitical': show_geopolitical,
            'show_cooperation': show_cooperation,
            'show_technical': show_technical,
            'threat_assessment': threat_assessment,
            'scenario': scenario
        }
    
    def display_strategic_metrics(self, df, config):
        """M√©triques strat√©giques avanc√©es"""
        st.markdown('<h3 class="section-header">üéØ TABLEAU DE BORD STRAT√âGIQUE BRICS</h3>', 
                   unsafe_allow_html=True)
        
        derniere_annee = df['Annee'].max()
        data_actuelle = df[df['Annee'] == derniere_annee].iloc[0]
        data_2000 = df[df['Annee'] == 2000].iloc[0]
        
        # Premi√®re ligne de m√©triques
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown("""
            <div class="metric-card">
                <h4>üí∞ BUDGET D√âFENSE TOTAL 2027</h4>
                <h2>{:.0f} Md$</h2>
                <p>üìà {:.1f}% du PIB BRICS</p>
            </div>
            """.format(data_actuelle['Budget_Defense_Mds'], data_actuelle['PIB_Militaire_Pourcent']), 
            unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="metric-card">
                <h4>üë• EFFECTIFS TOTAUX</h4>
                <h2>{:,.0f}K</h2>
                <p>‚öîÔ∏è +{:.1f}% depuis 2000</p>
            </div>
            """.format(data_actuelle['Personnel_Milliers'], 
                     ((data_actuelle['Personnel_Milliers'] - data_2000['Personnel_Milliers']) / data_2000['Personnel_Milliers']) * 100), 
            unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="china-card">
                <h4>‚ò¢Ô∏è PUISSANCE NUCL√âAIRE</h4>
                <h2>{:.0f}%</h2>
                <p>üöÄ {} ogives strat√©giques</p>
            </div>
            """.format(data_actuelle['Capacite_Dissuasion'], 
                     int(data_actuelle.get('Stock_Ogives_Nucleaires', 0))), 
            unsafe_allow_html=True)
        
        with col4:
            st.markdown("""
            <div class="cooperation-card">
                <h4>ü§ù COOP√âRATION BRICS</h4>
                <h2>{:.0f}%</h2>
                <p>üîß {} projets conjoints</p>
            </div>
            """.format(data_actuelle['Cooperation_Structured'], 
                     int(data_actuelle.get('Projets_Cooperation', 0))), 
            unsafe_allow_html=True)
        
        # Deuxi√®me ligne de m√©triques
        col5, col6, col7, col8 = st.columns(4)
        
        with col5:
            reduction_temps = ((data_2000['Temps_Mobilisation_Jours'] - data_actuelle['Temps_Mobilisation_Jours']) / 
                             data_2000['Temps_Mobilisation_Jours']) * 100
            st.metric(
                "‚è±Ô∏è Temps Mobilisation",
                f"{data_actuelle['Temps_Mobilisation_Jours']:.1f} jours",
                f"{reduction_temps:+.1f}%"
            )
        
        with col6:
            croissance_navale = ((data_actuelle['Capacite_Navale'] - data_2000['Capacite_Navale']) / 
                               data_2000['Capacite_Navale']) * 100
            st.metric(
                "üåä Puissance Navale",
                f"{data_actuelle['Capacite_Navale']:.1f}%",
                f"{croissance_navale:+.1f}%"
            )
        
        with col7:
            if 'Portee_Missiles_Km' in df.columns:
                croissance_portee = ((data_actuelle['Portee_Missiles_Km'] - data_2000.get('Portee_Missiles_Km', 2000)) / 
                                   data_2000.get('Portee_Missiles_Km', 2000)) * 100
                st.metric(
                    "üéØ Port√©e Missiles Moyenne",
                    f"{data_actuelle['Portee_Missiles_Km']:,.0f} km",
                    f"{croissance_portee:+.1f}%"
                )
        
        with col8:
            st.metric(
                "üìä Pr√©paration Op√©rationnelle",
                f"{data_actuelle['Readiness_Operative']:.1f}%",
                f"+{(data_actuelle['Readiness_Operative'] - data_2000['Readiness_Operative']):.1f}%"
            )
    
    def create_comprehensive_analysis(self, df, config):
        """Analyse compl√®te multidimensionnelle"""
        st.markdown('<h3 class="section-header">üìä ANALYSE MULTIDIMENSIONNELLE BRICS</h3>', 
                   unsafe_allow_html=True)
        
        # Graphiques principaux
        col1, col2 = st.columns(2)
        
        with col1:
            # √âvolution des capacit√©s principales
            fig = go.Figure()
            
            capacites = ['Readiness_Operative', 'Capacite_Dissuasion', 'Cyber_Capabilities', 'Cooperation_Structured']
            noms = ['Pr√©paration Op√©r.', 'Dissuasion Strat.', 'Capacit√©s Cyber', 'Coop√©ration BRICS']
            couleurs = ['#FF9933', '#0055A4', '#4B0082', '#008000']
            
            for i, (cap, nom, couleur) in enumerate(zip(capacites, noms, couleurs)):
                if cap in df.columns:
                    fig.add_trace(go.Scatter(
                        x=df['Annee'], y=df[cap],
                        mode='lines', name=nom,
                        line=dict(color=couleur, width=4),
                        hovertemplate=f"{nom}: %{{y:.1f}}%<extra></extra>"
                    ))
            
            fig.update_layout(
                title="üìà √âVOLUTION DES CAPACIT√âS STRAT√âGIQUES BRICS (2000-2027)",
                xaxis_title="Ann√©e",
                yaxis_title="Niveau de Capacit√© (%)",
                height=500,
                template="plotly_white",
                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Analyse des coop√©rations strat√©giques
            strategic_data = []
            strategic_names = []
            
            if 'Exercices_Conjoints' in df.columns:
                strategic_data.append(df['Exercices_Conjoints'])
                strategic_names.append('Exercices Conjoints')
            
            if 'Projets_Cooperation' in df.columns:
                strategic_data.append(df['Projets_Cooperation'])
                strategic_names.append('Projets Coop√©ration')
            
            if 'Echanges_Technologiques' in df.columns:
                strategic_data.append(df['Echanges_Technologiques'])
                strategic_names.append('√âchanges Technologiques')
            
            if strategic_data:
                fig = make_subplots(specs=[[{"secondary_y": True}]])
                
                for i, (data, nom) in enumerate(zip(strategic_data, strategic_names)):
                    fig.add_trace(
                        go.Scatter(x=df['Annee'], y=data, name=nom,
                                 line=dict(width=4)),
                        secondary_y=(i > 0)
                    )
                
                fig.update_layout(
                    title="ü§ù COOP√âRATIONS STRAT√âGIQUES - √âVOLUTION COMPAR√âE",
                    height=500,
                    template="plotly_white"
                )
                st.plotly_chart(fig, use_container_width=True)
    
    def create_geopolitical_analysis(self, df, config):
        """Analyse g√©opolitique avanc√©e"""
        st.markdown('<h3 class="section-header">üåç CONTEXTE G√âOPOLITIQUE BRICS</h3>', 
                   unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Architecture g√©opolitique
            st.markdown("""
            <div class="china-card">
                <h4>üèõÔ∏è ARCHITECTURE G√âOPOLITIQUE BRICS</h4>
                <p><strong>Chine:</strong> Puissance √©conomique et militaire mondiale √©mergente</p>
                <p><strong>Russie:</strong> Puissance nucl√©aire et √©nerg√©tique historique</p>
                <p><strong>Inde:</strong> D√©mocratie √©mergente et puissance r√©gionale</p>
                <p><strong>Br√©sil:</strong> Leader latino-am√©ricain et puissance verte</p>
                <p><strong>Afrique du Sud:</strong> Porte d'entr√©e africaine et leader r√©gional</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Analyse des relations internationales
            st.markdown("""
            <div class="cooperation-card">
                <h4>üåê RELATIONS INTERNATIONALES</h4>
                <p><strong>Occident:</strong> Relations complexes - coop√©ration et comp√©tition</p>
                <p><strong>Global Sud:</strong> Leadership et partenariats renforc√©s</p>
                <p><strong>Organisations:</strong> ONU, OCS, G20 - recherche de r√©forme</p>
                <p><strong>√âconomie:</strong> NDB - Alternative aux institutions de Bretton Woods</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Expansion BRICS+
            expansion_data = {
                'Ann√©e': [2009, 2011, 2015, 2017, 2021, 2023, 2024],
                'Membres': [5, 5, 5, 5, 5, 5, 11],
                'PIB_Mondial': [18, 19, 23, 24, 26, 27, 32]  # %
            }
            expansion_df = pd.DataFrame(expansion_data)
            
            fig = px.line(expansion_df, x='Ann√©e', y='Membres', 
                         title="üìà EXPANSION DES BRICS - MEMBRES ET INFLUENCE",
                         labels={'Membres': 'Nombre de Membres'},
                         markers=True)
            fig.add_trace(go.Scatter(x=expansion_df['Ann√©e'], y=expansion_df['PIB_Mondial'], 
                                   mode='lines+markers', name='Part du PIB Mondial (%)',
                                   yaxis='y2'))
            fig.update_layout(yaxis2=dict(title='Part du PIB Mondial (%)', overlaying='y', side='right'))
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
            
            # Indice de coop√©ration strat√©gique
            cooperation = [min(20 + 4 * (annee - 2009), 75) for annee in df['Annee'] if annee >= 2009] + [0] * (2009 - min(df['Annee']))
            annees_coop = [annee for annee in df['Annee'] if annee >= 2009] + [2009] * (2009 - min(df['Annee']))
            
            fig = px.area(x=annees_coop, y=cooperation,
                         title="üïäÔ∏è COOP√âRATION STRAT√âGIQUE BRICS",
                         labels={'x': 'Ann√©e', 'y': 'Niveau de Coop√©ration (%)'})
            fig.update_traces(fillcolor='rgba(255, 153, 51, 0.3)', line_color='#FF9933')
            fig.update_layout(height=300)
            st.plotly_chart(fig, use_container_width=True)
    
    def create_member_analysis(self, df, config):
        """Analyse des capacit√©s des membres"""
        st.markdown('<h3 class="section-header">üáßüá∑üá∑üá∫üáÆüá≥üá®üá≥üáøüá¶ CAPACIT√âS DES MEMBRES BRICS</h3>', 
                   unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Contributions des membres
            contributions_data = []
            for pays, data in self.member_capabilities.items():
                contributions_data.append({
                    'Pays': pays,
                    'Budget (Md$)': data['budget'],
                    'Personnel (K)': data['personnel'],
                    'Nucl√©aire': data['nucleaire'],
                    'Technologies': data['technologies']
                })
            
            contributions_df = pd.DataFrame(contributions_data)
            
            fig = px.bar(contributions_df, x='Pays', y='Budget (Md$)',
                        title="üí∞ CONTRIBUTIONS BUDG√âTAIRES DES MEMBRES",
                        color='Budget (Md$)',
                        color_continuous_scale='viridis')
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Cartographie des capacit√©s sp√©cialis√©es
            st.markdown("""
            <div class="russia-card">
                <h4>üéØ SP√âCIALISATIONS STRAT√âGIQUES</h4>
                <p><strong>Chine:</strong> Production massive, cyber, espace, marine</p>
                <p><strong>Russie:</strong> Armes nucl√©aires, hypersoniques, √©nergie</p>
                <p><strong>Inde:</strong> Missiles, spatial, puissance r√©gionale</p>
                <p><strong>Br√©sil:</strong> Amazonie, surveillance, sous-marins</p>
                <p><strong>Afrique du Sud:</strong> Renseignement, paix, ressources</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Avantages comparatifs
            advantages_data = {
                'Domaine': ['Production Industrielle', 'Technologie Nucl√©aire', 'Missiles', 
                           'Marine', 'Cybers√©curit√©', 'Renseignement'],
                'Chine': [9, 8, 9, 8, 9, 7],
                'Russie': [6, 9, 9, 7, 8, 8],
                'Inde': [7, 7, 8, 6, 7, 6],
                'Br√©sil': [5, 0, 4, 5, 5, 5],
                'Afrique du Sud': [3, 0, 3, 3, 6, 7]
            }
            advantages_df = pd.DataFrame(advantages_data)
            
            fig = go.Figure(data=[
                go.Bar(name='Chine', x=advantages_df['Domaine'], y=advantages_df['Chine']),
                go.Bar(name='Russie', x=advantages_df['Domaine'], y=advantages_df['Russie']),
                go.Bar(name='Inde', x=advantages_df['Domaine'], y=advantages_df['Inde']),
                go.Bar(name='Br√©sil', x=advantages_df['Domaine'], y=advantages_df['Br√©sil']),
                go.Bar(name='Afrique du Sud', x=advantages_df['Domaine'], y=advantages_df['Afrique du Sud'])
            ])
            fig.update_layout(title="üìä AVANTAGES COMPARATIFS STRAT√âGIQUES (0-10)",
                             barmode='group', height=400)
            st.plotly_chart(fig, use_container_width=True)
    
    def create_technical_analysis(self, df, config):
        """Analyse technique d√©taill√©e"""
        st.markdown('<h3 class="section-header">üî¨ ANALYSE TECHNIQUE AVANC√âE</h3>', 
                   unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Analyse des syst√®mes d'armes
            systems_data = {
                'Syst√®me': ['DF-41 (Chine)', 'RS-28 Sarmat (Russie)', 'Agni-V (Inde)', 
                           'J-20 (Chine)', 'Su-57 (Russie)', 'Sous-marin Type 094 (Chine)',
                           'Sous-marin Arihant (Inde)', 'Fr√©gate Classe Kolkata (Inde)'],
                'Port√©e/Puissance': [15000, 18000, 5000, 5500, 3500, 12000, 3500, 7500],
                'Pays': ['Chine', 'Russie', 'Inde', 'Chine', 'Russie', 'Chine', 'Inde', 'Inde'],
                'Statut': ['Op√©rationnel', 'Op√©rationnel', 'Op√©rationnel', 'Op√©rationnel', 'Op√©rationnel', 'Op√©rationnel', 'Op√©rationnel', 'Op√©rationnel']
            }
            systems_df = pd.DataFrame(systems_data)
            
            fig = px.scatter(systems_df, x='Port√©e/Puissance', y='Pays', 
                           size='Port√©e/Puissance', color='Pays',
                           hover_name='Syst√®me', log_x=True,
                           title="üöÄ SYST√àMES D'ARMES DES BRICS",
                           size_max=30)
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Analyse de la modernisation
            modernization_data = {
                'Domaine': ['Forces Nucl√©aires', 'Forces Conventionnelles', 
                          'Marine', 'D√©fense A√©rienne', 'Cybers√©curit√©'],
                'Niveau 2000': [60, 45, 40, 35, 30],
                'Niveau 2027': [85, 75, 78, 72, 80]
            }
            modern_df = pd.DataFrame(modernization_data)
            
            fig = go.Figure()
            fig.add_trace(go.Bar(name='2000', x=modern_df['Domaine'], y=modern_df['Niveau 2000'],
                                marker_color='#FF9933'))
            fig.add_trace(go.Bar(name='2027', x=modern_df['Domaine'], y=modern_df['Niveau 2027'],
                                marker_color='#0055A4'))
            
            fig.update_layout(title="üìà MODERNISATION DES CAPACIT√âS MILITAIRES BRICS",
                             barmode='group', height=500)
            st.plotly_chart(fig, use_container_width=True)
            
            # Innovations technologiques
            st.markdown("""
            <div class="cooperation-card">
                <h4>üöÄ INNOVATIONS TECHNOLOGIQUES BRICS</h4>
                <p><strong>Chine:</strong> DF-ZF hypersonique, J-20 furtif, drones de combat</p>
                <p><strong>Russie:</strong> Avangard hypersonique, S-500, guerre √©lectronique</p>
                <p><strong>Inde:</strong> Missiles BrahMos, programme spatial, cyber d√©fense</p>
                <p><strong>Br√©sil:</strong> Syst√®mes de surveillance, sous-marins conventionnels</p>
                <p><strong>Afrique du Sud:</strong> Renseignement √©lectronique, maintien de la paix</p>
            </div>
            """, unsafe_allow_html=True)
    
    def create_cooperation_analysis(self, config):
        """Analyse des coop√©rations BRICS"""
        st.markdown('<h3 class="section-header">ü§ù ANALYSE DES COOP√âRATIONS BRICS</h3>', 
                   unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Projets de coop√©ration
            cooperation_data = []
            for projet, details in self.cooperation_projects.items():
                cooperation_data.append({
                    'Projet': projet,
                    'Pays': details['pays'],
                    'Type': details['type'],
                    'Statut': details['statut']
                })
            
            cooperation_df = pd.DataFrame(cooperation_data)
            
            fig = px.treemap(cooperation_df, path=['Type', 'Projet'],
                            title="üå≥ CARTE DES PROJETS DE COOP√âRATION BRICS",
                            color='Type')
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Avantages de la coop√©ration
            st.markdown("""
            <div class="china-card">
                <h4>üèÜ AVANTAGES DE LA COOP√âRATION BRICS</h4>
                <p><strong>√âconomies d'√©chelle:</strong> March√© combin√© de 3.2 milliards de personnes</p>
                <p><strong>Compl√©mentarit√©:</strong> Technologies russes + production chinoise</p>
                <p><strong>R√©duction des co√ªts:</strong> R&D partag√©e et production collaborative</p>
                <p><strong>Autonomie strat√©gique:</strong> R√©duction de la d√©pendance occidentale</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Domaines de coop√©ration future
            future_coop_data = {
                'Domaine': ['D√©fense Anti-Missile', 'Guerre Cyber', 'Espace Militaire', 
                           'Renseignement', 'Recherche Technologique', 'Exercices Conjoints'],
                'Potentiel': [8, 9, 7, 8, 9, 8]  # sur 10
            }
            future_coop_df = pd.DataFrame(future_coop_data)
            
            fig = px.bar(future_coop_df, x='Domaine', y='Potentiel',
                        title="üîÆ POTENTIEL DE COOP√âRATION FUTURE",
                        color='Potentiel',
                        color_continuous_scale='reds')
            fig.update_layout(height=300)
            st.plotly_chart(fig, use_container_width=True)
    
    def create_threat_assessment(self, df, config):
        """√âvaluation avanc√©e des menaces"""
        st.markdown('<h3 class="section-header">‚ö†Ô∏è √âVALUATION STRAT√âGIQUE DES MENACES</h3>', 
                   unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Matrice des menaces
            threats_data = {
                'Type de Menace': ['Pression Occidentale', 'Sanctions √âconomiques', 
                                 'Guerre Cyber', 'Instabilit√© R√©gionale', 
                                 'Conflits Frontaliers', 'Crise √ânerg√©tique'],
                'Probabilit√©': [0.8, 0.7, 0.9, 0.6, 0.5, 0.4],
                'Impact': [0.7, 0.8, 0.6, 0.5, 0.7, 0.8],
                'Niveau Pr√©paration': [0.7, 0.6, 0.8, 0.5, 0.6, 0.5]
            }
            threats_df = pd.DataFrame(threats_data)
            
            fig = px.scatter(threats_df, x='Probabilit√©', y='Impact', 
                           size='Niveau Pr√©paration', color='Type de Menace',
                           title="üéØ MATRICE RISQUES - PROBABILIT√â VS IMPACT",
                           size_max=30)
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Capacit√©s de r√©ponse
            response_data = {
                'Sc√©nario': ['Sanctions √âconomiques', 'Pression Militaire', 
                           'Guerre Cyber', 'Crise √ânerg√©tique', 'Instabilit√© Politique'],
                'Chine': [0.8, 0.7, 0.9, 0.6, 0.5],
                'Russie': [0.6, 0.9, 0.8, 0.7, 0.4],
                'Inde': [0.7, 0.6, 0.7, 0.5, 0.6],
                'Coop√©ration': [0.9, 0.8, 0.8, 0.7, 0.7]
            }
            response_df = pd.DataFrame(response_data)
            
            fig = go.Figure(data=[
                go.Bar(name='Chine', x=response_df['Sc√©nario'], y=response_df['Chine']),
                go.Bar(name='Russie', x=response_df['Sc√©nario'], y=response_df['Russie']),
                go.Bar(name='Inde', x=response_df['Sc√©nario'], y=response_df['Inde']),
                go.Bar(name='Coop√©ration', x=response_df['Sc√©nario'], y=response_df['Coop√©ration'])
            ])
            fig.update_layout(title="üõ°Ô∏è CAPACIT√âS DE R√âPONSE PAR ACTEUR",
                             barmode='group', height=500)
            st.plotly_chart(fig, use_container_width=True)
        
        # Recommandations strat√©giques
        st.markdown("""
        <div class="cooperation-card">
            <h4>üéØ RECOMMANDATIONS STRAT√âGIQUES BRICS</h4>
            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; margin-top: 1rem;">
                <div><strong>‚Ä¢ Renforcement coop√©ration:</strong> Commandement militaire commun</div>
                <div><strong>‚Ä¢ Autonomie technologique:</strong> Cha√Ænes d'approvisionnement alternatives</div>
                <div><strong>‚Ä¢ Dissuasion int√©gr√©e:</strong> Coordination des capacit√©s nucl√©aires</div>
                <div><strong>‚Ä¢ Cybers√©curit√© collective:</strong> Centre de cyber d√©fense BRICS</div>
                <div><strong>‚Ä¢ Industrie de d√©fense:</strong> Production collaborative d'armements</div>
                <div><strong>‚Ä¢ Expansion BRICS+:</strong> Int√©gration de nouveaux membres</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    def create_cooperation_database(self):
        """Base de donn√©es des coop√©rations BRICS"""
        st.markdown('<h3 class="section-header">ü§ù BASE DE DONN√âES DES COOP√âRATIONS BRICS</h3>', 
                   unsafe_allow_html=True)
        
        cooperation_data = []
        for nom, specs in self.cooperation_projects.items():
            cooperation_data.append({
                'Projet': nom,
                'Pays Participants': specs['pays'],
                'Type': specs['type'],
                'Statut': specs['statut'],
                'D√©tails': specs.get('objectif', specs.get('localisation', specs.get('domaines', 'N/A')))
            })
        
        cooperation_df = pd.DataFrame(cooperation_data)
        
        # Affichage interactif
        col1, col2 = st.columns([2, 1])
        
        with col1:
            fig = px.treemap(cooperation_df, path=['Type', 'Projet'],
                            title="ü§ù CARTE DES COOP√âRATIONS BRICS",
                            color='Type')
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.markdown("""
            <div class="china-card">
                <h4>üìã PROJETS DE COOP√âRATION</h4>
            """, unsafe_allow_html=True)
            
            for projet in cooperation_data:
                st.markdown(f"""
                <div style="background: rgba(255,255,255,0.1); padding: 0.5rem; margin: 0.2rem 0; border-radius: 5px;">
                    <strong>{projet['Projet']}</strong><br>
                    üåç {projet['Pays Participants']} ‚Ä¢ üéØ {projet['Type']}<br>
                    üìä {projet['Statut']} ‚Ä¢ üìù {projet['D√©tails']}
                </div>
                """, unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)
    
    def run_advanced_dashboard(self):
        """Ex√©cute le dashboard avanc√© complet"""
        # Sidebar avanc√©
        controls = self.create_advanced_sidebar()
        
        # Header avanc√©
        self.display_advanced_header()
        
        # G√©n√©ration des donn√©es avanc√©es
        df, config = self.generate_advanced_data(controls['selection'])
        
        # Navigation par onglets avanc√©s
        tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
            "üìä Tableau de Bord", 
            "üî¨ Analyse Technique", 
            "üåç Contexte G√©opolitique", 
            "üáßüá∑üá∑üá∫üáÆüá≥üá®üá≥üáøüá¶ Membres BRICS",
            "‚ö†Ô∏è √âvaluation Menaces",
            "ü§ù Coop√©rations BRICS",
            "üíé Synth√®se Strat√©gique"
        ])
        
        with tab1:
            self.display_strategic_metrics(df, config)
            self.create_comprehensive_analysis(df, config)
        
        with tab2:
            self.create_technical_analysis(df, config)
        
        with tab3:
            if controls['show_geopolitical']:
                self.create_geopolitical_analysis(df, config)
        
        with tab4:
            self.create_member_analysis(df, config)
        
        with tab5:
            if controls['threat_assessment']:
                self.create_threat_assessment(df, config)
        
        with tab6:
            if controls['show_cooperation']:
                self.create_cooperation_database()
        
        with tab7:
            self.create_strategic_synthesis(df, config, controls)
    
    def create_strategic_synthesis(self, df, config, controls):
        """Synth√®se strat√©gique finale"""
        st.markdown('<h3 class="section-header">üíé SYNTH√àSE STRAT√âGIQUE - BRICS</h3>', 
                   unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div class="china-card">
                <h4>üèÜ POINTS FORTS STRAT√âGIQUES</h4>
                <div style="margin-top: 1rem;">
                    <div class="russia-card" style="margin: 0.5rem 0;">
                        <strong>üåç Poids D√©mographique et √âconomique</strong>
                        <p>40% de la population mondiale et 30% du PIB mondial en parit√© de pouvoir d'achat</p>
                    </div>
                    <div class="india-card" style="margin: 0.5rem 0;">
                        <strong>‚ò¢Ô∏è Puissance Nucl√©aire Combin√©e</strong>
                        <p>Trois puissances nucl√©aires avec capacit√©s de seconde frappe cr√©dibles</p>
                    </div>
                    <div class="brazil-card" style="margin: 0.5rem 0;">
                        <strong>üöÄ Diversit√© des Capacit√©s</strong>
                        <p>Compl√©mentarit√© des forces : technologie russe + production chinoise + puissance indienne</p>
                    </div>
                    <div class="safrica-card" style="margin: 0.5rem 0;">
                        <strong>ü§ù Solidarit√© Sud-Sud</strong>
                        <p>Leadership dans le Global Sud avec l√©gitimit√© politique √©tendue</p>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="cooperation-card">
                <h4>üéØ D√âFIS ET VULN√âRABILIT√âS</h4>
                <div style="margin-top: 1rem;">
                    <div class="cooperation-card" style="margin: 0.5rem 0;">
                        <strong>üí∏ Divergences √âconomiques</strong>
                        <p>√âcarts de d√©veloppement importants entre les membres</p>
                    </div>
                    <div class="cooperation-card" style="margin: 0.5rem 0;">
                        <strong>üåê Conflits d'Int√©r√™ts</strong>
                        <p>Tensions frontali√®res et rivalit√©s historiques entre certains membres</p>
                    </div>
                    <div class="cooperation-card" style="margin: 0.5rem 0;">
                        <strong>üîß D√©pendance Technologique</strong>
                        <p>D√©pendance persistante aux technologies occidentales dans certains domaines</p>
                    </div>
                    <div class="cooperation-card" style="margin: 0.5rem 0;">
                        <strong>‚ö° Coordination Limit√©e</strong>
                        <p>Absence de structure militaire int√©gr√©e comparable √† l'OTAN</p>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # Perspectives futures
        st.markdown("""
        <div class="metric-card">
            <h4>üîÆ PERSPECTIVES STRAT√âGIQUES 2027-2035</h4>
            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; margin-top: 1rem;">
                <div>
                    <h5>üåç EXPANSION G√âOPOLITIQUE</h5>
                    <p>‚Ä¢ BRICS+ avec 15+ membres<br>‚Ä¢ Institutions financi√®res alternatives<br>‚Ä¢ Syst√®me de paiement commun<br>‚Ä¢ Alliances strat√©giques √©largies</p>
                </div>
                <div>
                    <h5>üõ°Ô∏è COOP√âRATION MILITAIRE</h5>
                    <p>‚Ä¢ Commandement militaire commun<br>‚Ä¢ Exercices navals r√©guliers<br>‚Ä¢ Syst√®me de d√©fense anti-missile<br>‚Ä¢ Centre cyber BRICS</p>
                </div>
                <div>
                    <h5>üöÄ INNOVATION TECHNOLOGIQUE</h5>
                    <p>‚Ä¢ Cha√Ænes d'approvisionnement autonomes<br>‚Ä¢ Recherche-d√©veloppement collaborative<br>‚Ä¢ Standards technologiques BRICS<br>‚Ä¢ Sup√©riorit√© dans domaines cl√©s</p>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Recommandations finales
        st.markdown("""
        <div class="china-card">
            <h4>üéñÔ∏è RECOMMANDATIONS STRAT√âGIQUES FINALES</h4>
            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; margin-top: 1rem;">
                <div>
                    <h5>üõ°Ô∏è RENFORCEMENT INTERNE</h5>
                    <p>‚Ä¢ Institutionnalisation de la coop√©ration militaire<br>
                    ‚Ä¢ Harmonisation des doctrines et √©quipements<br>
                    ‚Ä¢ D√©veloppement de l'industrie de d√©fense int√©gr√©e<br>
                    ‚Ä¢ Renforcement des capacit√©s cyber collectives</p>
                </div>
                <div>
                    <h5>üåç LEADERSHIP GLOBAL</h5>
                    <p>‚Ä¢ Expansion strat√©gique du BRICS+<br>
                    ‚Ä¢ D√©veloppement d'institutions alternatives<br>
                    ‚Ä¢ Promotion du multilat√©ralisme r√©form√©<br>
                    ‚Ä¢ Construction d'un ordre mondial multipolaire</p>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

# Lancement du dashboard avanc√©
if __name__ == "__main__":
    dashboard = DefenseBricsDashboardAvance()
    dashboard.run_advanced_dashboard()